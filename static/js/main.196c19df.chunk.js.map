{"version":3,"sources":["Components/Search/Search.jsx","Components/Home/Home.jsx","Helpers/months.js","Components/AllAnimalsDisplay/AllAnimalsDisplay.jsx","Components/SingleCrit/SingleCrit.jsx","Components/SingleFish/SingleFish.jsx","Components/SuggestionList/SuggestionList.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","props","useState","input","setInput","handleChange","event","userInput","target","value","onSubmitFromApp","to","className","Form","inline","FormControl","type","placeholder","onChange","onBlur","Button","onClick","preventDefault","variant","Home","src","alt","1","2","3","4","5","6","7","8","9","10","11","12","AllAnimalsDisplay","dataObjAnimals","setDataObjAnimals","hiddenAnimals","setHiddenAnimals","clicked","setClicked","followedPath","match","path","useEffect","allUrl","a","fetch","response","json","makeApiCall","allAnimalValues","Object","values","map","element","index","key","Math","random","icon_uri","name","includes","id","listMonths","months","month","hideTheseAnimals","chosenMonth","hideHelperArr","forEach","animal","availability","push","animalType","toUpperCase","substring","SingleCrit","singleCrit","setSingleCrit","location","pathname","wikiURL","newUrl","splitName","split","firstLetter","join","image_uri","price","rarity","href","SingleFish","singleFish","setSingleFish","SuggestionList","dataObjCrit","setDataObjCrit","dataObjFish","setDataObjFish","makeCritApiCall","jsonCrit","makeFishApiCall","jsonFish","allCrittersValues","i","length","wordFromSearch","indexOf","allFishValues","App","setWordFromSearch","Navbar","Nav","Item","userWord","exact","component","render","routerProps","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.196c19df.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport './search.scss';\n\nexport default function Search(props) {\n    const [input, setInput] = useState(\"\");\n\n    const handleChange = event => {\n        const userInput = event.target.value;\n        setInput(userInput);\n        props.onSubmitFromApp(input);\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setInput(\"\")\n    }\n\n    return (\n        <>\n            <Link to='/search' className='noUnderline'>\n                <Form inline  >\n                    <FormControl \n                    type=\"text\" \n                    placeholder=\"Find a critter\" \n                    className=\"mr-sm-2\" \n                    value={input} \n                    onChange={handleChange} \n                    onBlur={handleChange}/>\n                        <Button onClick={handleSubmit} variant=\"success\" type='submit' >Search</Button>\n                </Form>\n            </Link>\n         </>\n    ) \n   \n}","import React from 'react'\nimport './home.scss'\n\n\nexport default function Home() {\n    \n    return (\n        <>\n            <div>\n                <img src=\"https://i.imgur.com/GXXSS53.png\" alt='Animal Crossing New Horizons logo' />\n                <div className='imgBlurbTwo' >\n                    <img src=\"https://i.imgur.com/WMQtYml.png\" alt='Isabell' />\n                    <p>Hi! This is Pallie from Tobey Town. Look up prices and where to find the critters and fish from the game Animal Crossing! You can also check which animals are available during each month.</p>\n                </div>\n            </div>\n        </>\n    ) \n   \n}\n","export default {    \n    1: 'January',\n    2: 'February',\n    3: 'March', \n    4: 'April',\n    5: 'May',\n    6: 'June',\n    7: 'July',\n    8: 'August',\n    9: 'September',\n    10: 'October',\n    11: 'November',\n    12: 'December'   \n}","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport months from '../../Helpers/months'\nimport './critters.scss'\n\nconst AllAnimalsDisplay = (props) => {\n\n    const [dataObjAnimals, setDataObjAnimals] = useState(\"\")\n    const [hiddenAnimals, setHiddenAnimals] = useState([])\n    const [clicked, setClicked] = useState('')\n\n    let followedPath = props.match.path\n    if (followedPath === \"/critters\") {\n        followedPath = \"/bugs\"\n    }\n\n    useEffect( () => {\n        let allUrl = `https://acnhapi.com/v1${followedPath}`;\n        const makeApiCall = async () => {\n            const response = await fetch(allUrl);\n            const json = await response.json();\n            setDataObjAnimals(json);\n        }\n        makeApiCall();\n    }, [followedPath]);\n\n    const allAnimalValues = Object.values(dataObjAnimals).map((element, index) => {\n        return (\n            <div  key={Math.random(5000)}>\n                <Link to={'/' + element['file-name']}>\n                    <div className='critters-border'>\n                        <img  src={element.icon_uri} alt={element.name[0]} className={hiddenAnimals.includes(element.id) ? 'hide critters-border' : 'critters-border' } />\n                    </div>\n                </Link>\n            </div>\n        )\n    })\n\n    const listMonths = Object.values(months).map((month, index) => {\n        return (\n            <h3 key={index} className={ clicked === index ? 'cursor-point cute-button selected-month' : 'cursor-point cute-button'} onClick={() => {hideTheseAnimals(index+1)}}>{month}</h3>\n        )\n    })\n        \n    const hideTheseAnimals = chosenMonth => {\n        const hideHelperArr = []\n        Object.values(dataObjAnimals).forEach(animal => {\n            if (chosenMonth !== \"\") {\n                if (!animal.availability['month-array-northern'].includes(chosenMonth)) {\n                    hideHelperArr.push(animal.id)\n                }  \n            }\n            return hideHelperArr\n        })\n        setHiddenAnimals(hideHelperArr)\n        setClicked(chosenMonth-1)\n    }\n    \n    const resetState = () => {\n        setHiddenAnimals([])\n        setClicked('')\n    }\n\n    let animalType = props.match.path[1].toUpperCase(0) + props.match.path.substring(2)\n            \n    return (\n        <>\n            <h1 className='cursor-point animals-title-margin' onClick={() => {resetState()}}>All {animalType}!</h1>\n            <div className='months-grid'>\n                {listMonths}\n            </div>\n            <div className='all-critters-grid'>\n                {allAnimalValues}\n            </div>\n        </>\n    ) \n}\n\nexport default AllAnimalsDisplay","import React, { useEffect, useState } from \"react\"\nimport \"./singleCrit.scss\"\n\nconst SingleCrit = (props) => {\n  const [singleCrit, setSingleCrit] = useState(\"\")\n\n  let path = props.location.pathname\n  let wikiURL = `https://animalcrossing.fandom.com/wiki${path}`\n\n  useEffect(() => {\n    let newUrl = `https://acnhapi.com/v1/bugs${path}`\n    const makeApiCall = async () => {\n      const response = await fetch(newUrl)\n      const json = await response.json()\n      setSingleCrit(json)\n    };\n    makeApiCall()\n  }, [])\n\n  if (singleCrit.name) {\n    let firstNameInObj = Object.values(singleCrit.name)\n    let splitName = firstNameInObj[0].split(\"\")\n    let firstLetter = splitName[0].toUpperCase()\n    splitName[0] = firstLetter\n    splitName = splitName.join(\"\")\n\n    return (\n      <div className=\"singleCritContainer\">\n        <h1>{splitName}</h1>\n        <img src={singleCrit.image_uri} alt={singleCrit.name} />\n        <div className=\"imgBlurb\">\n          <img src=\"https://i.imgur.com/IwwgqIP.png\" alt=\"Blathers\" />\n          <p>{singleCrit[\"museum-phrase\"]}</p>\n        </div>\n        <p>\n          <strong>Where is it? </strong> {singleCrit.availability.location}\n        </p>\n        <p>\n          <strong>Price: </strong>\n          {singleCrit.price} Bells (Flick's price: {singleCrit[\"price-flick\"]}{\" \"}\n          Bells)\n        </p>\n        <p>\n          <strong>Rarity: </strong>\n          {singleCrit.availability.rarity}\n        </p>\n        <a href={wikiURL}>Learn even more!</a>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default SingleCrit","import React, { useEffect, useState } from 'react'\n\nconst SingleFish = props => {\n\n    const [singleFish, setSingleFish] = useState(\"\")\n    \n    let path = props.location.pathname\n    let wikiURL = `https://animalcrossing.fandom.com/wiki${path}`\n\n    useEffect(() => {\n        let newUrl = `https://acnhapi.com/v1/fish${path}`\n        const makeApiCall = async () => {\n            const response = await fetch(newUrl)\n            const json = await response.json()\n            setSingleFish(json)\n        }\n        makeApiCall()\n    },[])\n\n\n        if (singleFish.name) {\n            let firstNameInObj = Object.values(singleFish.name)\n            let splitName = firstNameInObj[0].split(\"\")\n            let firstLetter = splitName[0].toUpperCase()\n            splitName[0] = firstLetter\n            splitName = splitName.join(\"\")\n  \n    return (\n            <div className='singleCritContainer'>\n                <h1>{splitName}</h1>\n                <img src={singleFish.image_uri} alt={singleFish.name} />\n                <div className='imgBlurb'>\n                    <img src='https://i.imgur.com/IwwgqIP.png' alt='Blathers' />\n                    <p>{singleFish['museum-phrase']}</p>\n                </div>\n                <p><strong>Where is it? </strong>{singleFish.availability.location}</p>\n                <p><strong>Price: </strong>{singleFish.price} Bells (CJ's price: {singleFish['price-cj']} Bells)</p>\n                <p><strong>Rarity: </strong>{singleFish.availability.rarity}</p>  \n                <a href={wikiURL}>Learn even more!</a>\n            </div>\n    )} else {return null}\n}\n\nexport default SingleFish\n   \n   ","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom';\n\n\nexport default function SuggestionList(props) {\n    \n    const [dataObjCrit, setDataObjCrit] = useState(\"\");\n    const [dataObjFish, setDataObjFish] = useState(\"\");\n\n    useEffect( () => {\n        let allCritUrl = `https://acnhapi.com/v1/bugs/`;\n        const makeCritApiCall = async () => {\n            const response = await fetch(allCritUrl);\n            const jsonCrit = await response.json();\n            setDataObjCrit(jsonCrit);\n        }\n        \n        let allFishUrl = `https://acnhapi.com/v1/fish/`;\n        const makeFishApiCall = async () => {\n            const response = await fetch(allFishUrl);\n            const jsonFish = await response.json();\n            setDataObjFish(jsonFish);\n        }\n\n        makeCritApiCall();\n        makeFishApiCall();\n    }, []);\n\n    const allCrittersValues = Object.values(dataObjCrit).map((element, index) => {\n        for (let i=0; i<element['file-name'].length; i++) {\n            if (props.wordFromSearch.length === 0 || props.wordFromSearch.length === 1) {\n                return null\n            } else if (element['file-name'].indexOf(props.wordFromSearch) > -1) {\n                return (\n                    <div  key={index}>\n                        <Link to={'/' + element['file-name']}>\n                            <img  src={element.icon_uri} alt={element.name[0]} className='crittersBorder' />\n                        </Link>\n                    </div>\n                    )\n            } else return null\n        }\n    })\n\n    const allFishValues = Object.values(dataObjFish).map((element, index) => {\n        for (let i=0; i<element['file-name'].length; i++) {\n            if (props.wordFromSearch.length === 0 || props.wordFromSearch.length === 1) {\n                return null\n            } else if (element['file-name'].indexOf(props.wordFromSearch) > -1) {\n                return (\n                    <div  key={index}>\n                        <Link to={'/' + element['file-name']}>\n                            <img  src={element.icon_uri} alt={element.name[0]} className='crittersBorder' />\n                        </Link>\n                    </div>\n                    )\n            } else return null\n        }\n    })\n            \n    return (\n        <>\n            <h1>Suggestion List!</h1>\n            <div className='all-critters-grid'>\n                {allCrittersValues}\n                {allFishValues}\n            </div>\n        </>\n    )   \n}","import React, { useState } from 'react';\nimport Search from './Components/Search/Search';\nimport Home from './Components/Home/Home'\nimport AllAnimalsDisplay from './Components/AllAnimalsDisplay/AllAnimalsDisplay';\nimport SingleCrit from './Components/SingleCrit/SingleCrit';\nimport SingleFish from './Components/SingleFish/SingleFish';\nimport SuggestionList from './Components/SuggestionList/SuggestionList';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav'\nimport './App.scss';\n\nfunction App() {\n\nconst [wordFromSearch, setWordFromSearch] = useState(\"\");\n\nconst handleSubmit = userWord => {\n  setWordFromSearch(userWord)\n} \n\n  return (\n    <div className=\"App\">\n      <Navbar id='nav' variant=\"dark\" >\n      <Link className='nav-brand' to='/animalcross/'>AC Critters</Link>\n        <Nav className=\"mr-auto\">\n          <Nav.Item>\n            <Link to='/critters'>Critters</Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Link to='/fish'>Fish</Link>\n          </Nav.Item>\n        </Nav>\n        <Search onSubmitFromApp={handleSubmit} />\n     \n      </Navbar>\n      <main>\n        <Switch>\n          <Route exact path='/animalcross/' component={Home} />\n          <Route exact path='/critters' render={routerProps => <AllAnimalsDisplay {...routerProps} />} />\n          <Route exact path='/fish' render={routerProps => <AllAnimalsDisplay {...routerProps} />} />\n          <Route \n           exact path='/search' \n          render={routerProps => <SuggestionList wordFromSearch={wordFromSearch} {...routerProps} />} />\n\n          <Route \n          exact path='/:singlePath' \n          render={ routerProps => \n            <> \n              <SingleCrit {...routerProps} />  \n              <SingleFish {...routerProps} /> \n            </> \n          }/>          \n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}